datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  token     String    @unique
  firstName String
  lastName  String
  history   History[]
}

model Category {
  id         String      @id @default(uuid())
  name       String
  companions Companion[]
}

model Companion {
  id           String @id @default(uuid())
  userId       String
  userName     String
  src          String
  name         String @db.Text
  description  String
  instructions String @db.Text
  seed         String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  messages Message[]

  @@index([categoryId])
}

enum Role {
  user
  system
}

model Message {
  id        String   @id @default(uuid())
  role      Role
  content   String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companionId String
  userId      String

  companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
}

model History {
  id          String @id @default(uuid())
  userId      String @unique
  companionId String @unique

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model UserSettings {
  id              String @id @default(cuid())
  userId          String @unique
  aiRequestsCount Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
